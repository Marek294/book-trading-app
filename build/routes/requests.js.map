{"version":3,"sources":["../../server/routes/requests.js"],"names":["router","Router","get","req","res","user_id","currentUser","id","query","where","buyer_id","fetchAll","then","json","requests","seller_id","post","book_id","body","username","fetch","request","book","forge","book_title","buyer_username","seller_username","seller","status","hasTimestamps","save","catch","success","error","err","put","set","delete","params","destroy"],"mappings":"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","file":"requests.js","sourcesContent":["import express from 'express';\r\nimport authenticate from '../middlewares/authenticate';\r\n\r\nimport Request from '../models/request';\r\nimport Book from '../models/book';\r\nimport User from '../models/user';\r\n\r\nlet router = express.Router();\r\n\r\nrouter.get('/myRequests',authenticate,(req,res) => {\r\n    const user_id = req.currentUser.id;\r\n\r\n    Request.query({\r\n        where: { buyer_id: user_id}\r\n    }).fetchAll().then(requests => {\r\n        res.json(requests);\r\n    })\r\n});\r\n\r\nrouter.get('/requestsToYou',authenticate,(req,res) => {\r\n    const user_id = req.currentUser.id;\r\n\r\n    Request.query({\r\n        where: { seller_id: user_id}\r\n    }).fetchAll().then(requests => {\r\n        res.json(requests);\r\n    })\r\n});\r\n\r\nrouter.post('/', authenticate, (req,res) => {\r\n    const { book_id } = req.body;\r\n    const user_id = req.currentUser.id;\r\n    const username = req.currentUser.get('username');\r\n\r\n    Request.query({\r\n        where: { book_id: book_id }\r\n    }).fetch().then(request => {\r\n        if(!request) {\r\n            Book.query({\r\n                where: { id: book_id }\r\n            }).fetch().then(book => {\r\n                if(book) {\r\n                    if(book.get('user_id') != user_id) {\r\n                        User.query({\r\n                            where: { id: book.get('user_id') }\r\n                        }).fetch().then(seller => {\r\n                            Request.forge({\r\n                                book_id,\r\n                                book_title: book.get('title'),\r\n                                buyer_id: user_id,\r\n                                buyer_username: username,\r\n                                seller_id: book.get('user_id'),\r\n                                seller_username: seller.get('username'),\r\n                                status: 'pending'\r\n                            }, {hasTimestamps: true}).save()\r\n                                .then(request => {\r\n                                    res.json(request);\r\n                                })\r\n                                .catch(err => {\r\n                                    res.status(500).json({success: false, error: err});\r\n                                })\r\n                        })\r\n                    }\r\n                    else res.status(403).json({ error: 'There is not possible to borrow your own book'});\r\n                } else res.status(403).json({ error: 'There is no book with such id'});\r\n            })\r\n        } else res.status(403).json({ error: 'This book is already borrowed' });\r\n    });\r\n});\r\n\r\nrouter.put('/',authenticate,(req, res) => {\r\n    const { id, status } = req.body;\r\n\r\n    if(status) {\r\n        Request.query({\r\n            where: {id: id}\r\n        }).fetch().then(request => {\r\n            if(request) {\r\n                request.set({ status: status });\r\n                request.save();\r\n                res.json(request);\r\n            } else res.status(403).json({error: 'There is no request with such book_id or seller_id'});\r\n        })\r\n    } else res.status(403).json({error: { status: 'This field is required' }});\r\n});\r\n\r\nrouter.delete('/:id', authenticate, (req,res) => {\r\n    Request.query({\r\n        where: {id : req.params.id}\r\n    }).fetch().then(request => {\r\n        if(request) {\r\n            request.destroy();\r\n            res.json(request);\r\n        } else res.status(403).json({ error: 'There is no request with such id'});\r\n    })\r\n});\r\n\r\nexport default router;"]}