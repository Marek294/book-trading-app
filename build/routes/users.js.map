{"version":3,"sources":["../../server/routes/users.js"],"names":["router","Router","post","req","res","body","errors","isValid","username","email","password","password_digest","hashSync","forge","hasTimestamps","save","then","json","success","user","catch","status","error","err","get","query","where","params","value","orWhere","fetch"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEAD,OAAOE,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,6BACD,sBAAkBD,IAAIE,IAAtB,CADC;AAAA,QACrBC,MADqB,sBACrBA,MADqB;AAAA,QACbC,OADa,sBACbA,OADa;;AAE3B,QAAGA,OAAH,EAAY;AAAA,wBAC8BJ,IAAIE,IADlC;AAAA,YACAG,QADA,aACAA,QADA;AAAA,YACUC,KADV,aACUA,KADV;AAAA,YACiBC,QADjB,aACiBA,QADjB;;AAER,YAAMC,kBAAkB,iBAAOC,QAAP,CAAgBF,QAAhB,EAAyB,EAAzB,CAAxB;;AAEA,uBAAKG,KAAL,CAAW,EAAEL,kBAAF,EAAYC,YAAZ,EAAmBE,gCAAnB,EAAX,EAAgD,EAAEG,eAAe,IAAjB,EAAhD,EAAyEC,IAAzE,GACKC,IADL,CACU,gBAAQ;AACVZ,gBAAIa,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBC,MAAMA,IAAvB,EAAT;AACH,SAHL,EAIKC,KAJL,CAIW,eAAO;AACVhB,gBAAIiB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBI,OAAOC,GAAzB,EAArB;AACH,SANL;AAQH,KAZD,MAYOnB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBZ,QAAQA,MAA1B,EAArB;AACV,CAfD;;AAiBAN,OAAOwB,GAAP,CAAW,SAAX,EAAsB,UAACrB,GAAD,EAAMC,GAAN,EAAc;AAChC,mBAAKqB,KAAL,CAAW;AACPC,eAAO,EAAElB,UAAUL,IAAIwB,MAAJ,CAAWC,KAAvB,EADA;AAEPC,iBAAS,EAAEpB,OAAON,IAAIwB,MAAJ,CAAWC,KAApB;AAFF,KAAX,EAGGE,KAHH,GAGWd,IAHX,CAGgB,UAACG,IAAD,EAAU;AACtBf,YAAIa,IAAJ,CAAS,EAAEE,MAAMA,IAAR,EAAT;AACH,KALD;AAMH,CAPD;;kBASenB,M","file":"users.js","sourcesContent":["import express from 'express';\r\nimport signupValidations from '../validations/signup';\r\nimport bcrypt from 'bcrypt';\r\n\r\nimport User from '../models/user';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/', (req, res) => {\r\n    let { errors, isValid } = signupValidations(req.body);\r\n    if(isValid) {\r\n        const { username, email, password } = req.body;\r\n        const password_digest = bcrypt.hashSync(password,10);\r\n\r\n        User.forge({ username, email, password_digest },{ hasTimestamps: true }).save()\r\n            .then(user => {\r\n                res.json({ success: true, user: user });\r\n            })\r\n            .catch(err => {\r\n                res.status(500).json({ success: false, error: err });\r\n            })\r\n\r\n    } else res.status(400).json({ success: false, errors: errors });\r\n});\r\n\r\nrouter.get('/:value', (req, res) => {\r\n    User.query({\r\n        where: { username: req.params.value },\r\n        orWhere: { email: req.params.value }\r\n    }).fetch().then((user) => {\r\n        res.json({ user: user });\r\n    })\r\n});\r\n\r\nexport default router;"]}