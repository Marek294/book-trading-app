{"version":3,"sources":["../../server/routes/auth.js"],"names":["router","Router","post","req","res","body","usernameOrEmail","password","query","where","username","orWhere","email","fetch","then","user","compareSync","get","token","sign","id","jwtSecret","json","success","status","errors","form"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEAD,OAAOE,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,oBACWD,IAAIE,IADf;AAAA,QACnBC,eADmB,aACnBA,eADmB;AAAA,QACFC,QADE,aACFA,QADE;;;AAG3B,mBAAKC,KAAL,CAAW;AACPC,eAAO,EAAEC,UAAUJ,eAAZ,EADA;AAEPK,iBAAS,EAAEC,OAAON,eAAT;AAFF,KAAX,EAGGO,KAHH,GAGWC,IAHX,CAGgB,gBAAQ;AACpB,YAAGC,IAAH,EAAS;AACL,gBAAG,iBAAOC,WAAP,CAAmBT,QAAnB,EAA4BQ,KAAKE,GAAL,CAAS,iBAAT,CAA5B,CAAH,EAA6D;;AAEzD,oBAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACnBC,wBAAIL,KAAKE,GAAL,CAAS,IAAT,CADe;AAEnBP,8BAAUK,KAAKE,GAAL,CAAS,UAAT;AAFS,iBAAT,EAGX,iBAAOI,SAHI,CAAd;;AAKAjB,oBAAIkB,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBL,OAAOA,KAAxB,EAAT;AAEH,aATD,MASOd,IAAIoB,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBE,QAAQ,EAAEC,MAAM,wBAAR,EAA1B,EAArB;AACV,SAXD,MAWOtB,IAAIoB,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBE,QAAQ,EAAEC,MAAM,wBAAR,EAA1B,EAArB;AACV,KAhBD;AAkBH,CArBD;;kBAuBe1B,M","file":"auth.js","sourcesContent":["import express from 'express';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport config from '../config';\r\n\r\nimport User from '../models/user';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/', (req, res) => {\r\n    const { usernameOrEmail, password } = req.body;\r\n\r\n    User.query({\r\n        where: { username: usernameOrEmail },\r\n        orWhere: { email: usernameOrEmail }\r\n    }).fetch().then(user => {\r\n        if(user) {\r\n            if(bcrypt.compareSync(password,user.get('password_digest'))) {\r\n\r\n                const token = jwt.sign({\r\n                    id: user.get('id'),\r\n                    username: user.get('username')\r\n                }, config.jwtSecret);\r\n\r\n                res.json({ success: true, token: token});\r\n\r\n            } else res.status(400).json({ success: false, errors: { form: 'Invalid authentication' } });\r\n        } else res.status(400).json({ success: false, errors: { form: 'Invalid authentication' } });\r\n    })\r\n\r\n});\r\n\r\nexport default router;"]}