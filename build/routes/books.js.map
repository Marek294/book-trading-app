{"version":3,"sources":["../../server/routes/books.js"],"names":["router","Router","post","req","res","body","book_id","title","authors","image_thumbnail","user_id","currentUser","id","forge","hasTimestamps","save","then","json","success","book","catch","status","error","err","get","params","query","where","fetchAll","books","requestIds","requests","map","push","request","delete","andWhere","fetch","destroy"],"mappings":"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","file":"books.js","sourcesContent":["import express from 'express';\r\nimport authenticate from '../middlewares/authenticate';\r\n\r\nimport Book from '../models/book';\r\nimport Request from '../models/request';\r\n\r\nlet router = express.Router();\r\n\r\nrouter.post('/', authenticate, (req,res) => {\r\n    const { book_id, title, authors, image_thumbnail } = req.body;\r\n    const user_id = req.currentUser.id;\r\n\r\n    Book.forge({ book_id, user_id, title, authors, image_thumbnail }, { hasTimestamps: true }).save()\r\n        .then(book => {\r\n            res.json({ success: true, book: book});\r\n        })\r\n        .catch(err => {\r\n            res.status(500).json({ success: false, error: err});\r\n        })\r\n});\r\n\r\nrouter.get('/:query', authenticate, (req,res) => {\r\n    if(req.params.query == 'user') {\r\n        Book.query({\r\n            where: { user_id: req.currentUser.id }\r\n        }).fetchAll().then((books) => {\r\n            res.json({ success: true, books: books });\r\n        })\r\n    } else if(req.params.query == 'all') {\r\n        Request.fetchAll().then(requests => {\r\n            const requestIds = [];\r\n\r\n            requests.map(request => {\r\n                requestIds.push(request.get('book_id'));\r\n            });\r\n\r\n            Book.query('whereNotIn', 'id', requestIds).fetchAll().then((books) => {\r\n                res.json({ success: true, books: books });\r\n            });\r\n        });\r\n\r\n    } else res.status(403).json({ success: false, error: 'Wrong query'})\r\n});\r\n\r\nrouter.delete('/:id', authenticate, (req,res) => {\r\n     Book.query({\r\n         where: { id: req.params.id },\r\n         andWhere: { user_id: req.currentUser.id }\r\n     }).fetch().then(book => {\r\n         if(book) {\r\n             book.destroy();\r\n             res.json({success: true, book: book});\r\n         } else {\r\n             res.status(500).json({ success: false, error: 'There is no book with provided id'});\r\n         }\r\n     });\r\n});\r\n\r\nexport default router;"]}